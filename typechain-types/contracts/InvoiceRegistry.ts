/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace InvoiceRegistry {
  export type InvoiceStruct = {
    invoiceHash: BytesLike;
    freelancerAddress: AddressLike;
    employerAddress: AddressLike;
    amount: BigNumberish;
    tokenAddress: AddressLike;
    chainId: BigNumberish;
    state: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    rejectionReason: string;
    hasEscrow: boolean;
  };

  export type InvoiceStructOutput = [
    invoiceHash: string,
    freelancerAddress: string,
    employerAddress: string,
    amount: bigint,
    tokenAddress: string,
    chainId: bigint,
    state: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    rejectionReason: string,
    hasEscrow: boolean
  ] & {
    invoiceHash: string;
    freelancerAddress: string;
    employerAddress: string;
    amount: bigint;
    tokenAddress: string;
    chainId: bigint;
    state: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    rejectionReason: string;
    hasEscrow: boolean;
  };
}

export interface InvoiceRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BACKEND_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "acceptInvoice"
      | "cancelInvoice"
      | "depositPayment"
      | "emergencyWithdraw"
      | "employerInvoices"
      | "escrowBalances"
      | "freelancerInvoices"
      | "getEmployerInvoices"
      | "getFreelancerInvoices"
      | "getInvoice"
      | "getRoleAdmin"
      | "getStatistics"
      | "grantRole"
      | "hasRole"
      | "invoiceExists"
      | "invoices"
      | "markAsPaid"
      | "pause"
      | "paused"
      | "refundPayment"
      | "registerInvoice"
      | "rejectInvoice"
      | "releasePayment"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "totalEscrowVolume"
      | "totalInvoices"
      | "totalPaidInvoices"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InvoiceAccepted"
      | "InvoiceCancelled"
      | "InvoicePaid"
      | "InvoiceRegistered"
      | "InvoiceRejected"
      | "Paused"
      | "PaymentDeposited"
      | "PaymentRefunded"
      | "PaymentReleased"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BACKEND_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptInvoice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelInvoice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employerInvoices",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowBalances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freelancerInvoices",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployerInvoices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreelancerInvoices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "invoices", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "markAsPaid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInvoice",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectInvoice",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEscrowVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvoices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPaidInvoices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BACKEND_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employerInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freelancerInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployerInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreelancerInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInvoice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invoiceExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invoices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markAsPaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEscrowVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPaidInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace InvoiceAcceptedEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    employer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    employer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    employer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceCancelledEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    canceller: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    canceller: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    canceller: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoicePaidEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    payer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    payer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    payer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceRegisteredEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    freelancer: AddressLike,
    employer: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    chainId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    freelancer: string,
    employer: string,
    amount: bigint,
    token: string,
    chainId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    freelancer: string;
    employer: string;
    amount: bigint;
    token: string;
    chainId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvoiceRejectedEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    employer: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    employer: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    employer: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentDepositedEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    depositor: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    depositor: string,
    amount: bigint,
    token: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    depositor: string;
    amount: bigint;
    token: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRefundedEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    refundRecipient: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    refundRecipient: string,
    amount: bigint,
    token: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    refundRecipient: string;
    amount: bigint;
    token: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    invoiceHash: BytesLike,
    recipient: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    invoiceHash: string,
    recipient: string,
    amount: bigint,
    token: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    invoiceHash: string;
    recipient: string;
    amount: bigint;
    token: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InvoiceRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): InvoiceRegistry;
  waitForDeployment(): Promise<this>;

  interface: InvoiceRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BACKEND_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  acceptInvoice: TypedContractMethod<
    [invoiceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelInvoice: TypedContractMethod<
    [invoiceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  depositPayment: TypedContractMethod<
    [invoiceHash: BytesLike],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  employerInvoices: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  escrowBalances: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  freelancerInvoices: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEmployerInvoices: TypedContractMethod<
    [employer: AddressLike],
    [string[]],
    "view"
  >;

  getFreelancerInvoices: TypedContractMethod<
    [freelancer: AddressLike],
    [string[]],
    "view"
  >;

  getInvoice: TypedContractMethod<
    [invoiceHash: BytesLike],
    [InvoiceRegistry.InvoiceStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStatistics: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  invoiceExists: TypedContractMethod<
    [invoiceHash: BytesLike],
    [boolean],
    "view"
  >;

  invoices: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        invoiceHash: string;
        freelancerAddress: string;
        employerAddress: string;
        amount: bigint;
        tokenAddress: string;
        chainId: bigint;
        state: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        rejectionReason: string;
        hasEscrow: boolean;
      }
    ],
    "view"
  >;

  markAsPaid: TypedContractMethod<
    [invoiceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  refundPayment: TypedContractMethod<
    [invoiceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  registerInvoice: TypedContractMethod<
    [
      invoiceHash: BytesLike,
      freelancerAddress: AddressLike,
      employerAddress: AddressLike,
      amount: BigNumberish,
      tokenAddress: AddressLike,
      chainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rejectInvoice: TypedContractMethod<
    [invoiceHash: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  releasePayment: TypedContractMethod<
    [invoiceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalEscrowVolume: TypedContractMethod<[], [bigint], "view">;

  totalInvoices: TypedContractMethod<[], [bigint], "view">;

  totalPaidInvoices: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BACKEND_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptInvoice"
  ): TypedContractMethod<[invoiceHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelInvoice"
  ): TypedContractMethod<[invoiceHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositPayment"
  ): TypedContractMethod<[invoiceHash: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "employerInvoices"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "escrowBalances"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "freelancerInvoices"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployerInvoices"
  ): TypedContractMethod<[employer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFreelancerInvoices"
  ): TypedContractMethod<[freelancer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getInvoice"
  ): TypedContractMethod<
    [invoiceHash: BytesLike],
    [InvoiceRegistry.InvoiceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStatistics"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "invoiceExists"
  ): TypedContractMethod<[invoiceHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "invoices"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        invoiceHash: string;
        freelancerAddress: string;
        employerAddress: string;
        amount: bigint;
        tokenAddress: string;
        chainId: bigint;
        state: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        rejectionReason: string;
        hasEscrow: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "markAsPaid"
  ): TypedContractMethod<[invoiceHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "refundPayment"
  ): TypedContractMethod<[invoiceHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerInvoice"
  ): TypedContractMethod<
    [
      invoiceHash: BytesLike,
      freelancerAddress: AddressLike,
      employerAddress: AddressLike,
      amount: BigNumberish,
      tokenAddress: AddressLike,
      chainId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectInvoice"
  ): TypedContractMethod<
    [invoiceHash: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<[invoiceHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalEscrowVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInvoices"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPaidInvoices"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "InvoiceAccepted"
  ): TypedContractEvent<
    InvoiceAcceptedEvent.InputTuple,
    InvoiceAcceptedEvent.OutputTuple,
    InvoiceAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceCancelled"
  ): TypedContractEvent<
    InvoiceCancelledEvent.InputTuple,
    InvoiceCancelledEvent.OutputTuple,
    InvoiceCancelledEvent.OutputObject
  >;
  getEvent(
    key: "InvoicePaid"
  ): TypedContractEvent<
    InvoicePaidEvent.InputTuple,
    InvoicePaidEvent.OutputTuple,
    InvoicePaidEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceRegistered"
  ): TypedContractEvent<
    InvoiceRegisteredEvent.InputTuple,
    InvoiceRegisteredEvent.OutputTuple,
    InvoiceRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "InvoiceRejected"
  ): TypedContractEvent<
    InvoiceRejectedEvent.InputTuple,
    InvoiceRejectedEvent.OutputTuple,
    InvoiceRejectedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentDeposited"
  ): TypedContractEvent<
    PaymentDepositedEvent.InputTuple,
    PaymentDepositedEvent.OutputTuple,
    PaymentDepositedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRefunded"
  ): TypedContractEvent<
    PaymentRefundedEvent.InputTuple,
    PaymentRefundedEvent.OutputTuple,
    PaymentRefundedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "InvoiceAccepted(bytes32,address,uint256)": TypedContractEvent<
      InvoiceAcceptedEvent.InputTuple,
      InvoiceAcceptedEvent.OutputTuple,
      InvoiceAcceptedEvent.OutputObject
    >;
    InvoiceAccepted: TypedContractEvent<
      InvoiceAcceptedEvent.InputTuple,
      InvoiceAcceptedEvent.OutputTuple,
      InvoiceAcceptedEvent.OutputObject
    >;

    "InvoiceCancelled(bytes32,address,uint256)": TypedContractEvent<
      InvoiceCancelledEvent.InputTuple,
      InvoiceCancelledEvent.OutputTuple,
      InvoiceCancelledEvent.OutputObject
    >;
    InvoiceCancelled: TypedContractEvent<
      InvoiceCancelledEvent.InputTuple,
      InvoiceCancelledEvent.OutputTuple,
      InvoiceCancelledEvent.OutputObject
    >;

    "InvoicePaid(bytes32,address,uint256)": TypedContractEvent<
      InvoicePaidEvent.InputTuple,
      InvoicePaidEvent.OutputTuple,
      InvoicePaidEvent.OutputObject
    >;
    InvoicePaid: TypedContractEvent<
      InvoicePaidEvent.InputTuple,
      InvoicePaidEvent.OutputTuple,
      InvoicePaidEvent.OutputObject
    >;

    "InvoiceRegistered(bytes32,address,address,uint256,address,uint256,uint256)": TypedContractEvent<
      InvoiceRegisteredEvent.InputTuple,
      InvoiceRegisteredEvent.OutputTuple,
      InvoiceRegisteredEvent.OutputObject
    >;
    InvoiceRegistered: TypedContractEvent<
      InvoiceRegisteredEvent.InputTuple,
      InvoiceRegisteredEvent.OutputTuple,
      InvoiceRegisteredEvent.OutputObject
    >;

    "InvoiceRejected(bytes32,address,string,uint256)": TypedContractEvent<
      InvoiceRejectedEvent.InputTuple,
      InvoiceRejectedEvent.OutputTuple,
      InvoiceRejectedEvent.OutputObject
    >;
    InvoiceRejected: TypedContractEvent<
      InvoiceRejectedEvent.InputTuple,
      InvoiceRejectedEvent.OutputTuple,
      InvoiceRejectedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentDeposited(bytes32,address,uint256,address,uint256)": TypedContractEvent<
      PaymentDepositedEvent.InputTuple,
      PaymentDepositedEvent.OutputTuple,
      PaymentDepositedEvent.OutputObject
    >;
    PaymentDeposited: TypedContractEvent<
      PaymentDepositedEvent.InputTuple,
      PaymentDepositedEvent.OutputTuple,
      PaymentDepositedEvent.OutputObject
    >;

    "PaymentRefunded(bytes32,address,uint256,address,uint256)": TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;
    PaymentRefunded: TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;

    "PaymentReleased(bytes32,address,uint256,address,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
